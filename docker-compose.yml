version: '3.8'

services:
  # Service PostgreSQL pour la base de données
  postgres:
    image: postgres:14-alpine
    container_name: ruche_postgres
    restart: always
    environment:
      POSTGRES_USER: ruche_user
      POSTGRES_PASSWORD: ruche_password
      POSTGRES_DB: ruche_db
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_LISTEN_ADDRESSES: "*"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/db/migrations:/docker-entrypoint-initdb.d
    networks:
      - ruche_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ruche_user -d ruche_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service pgAdmin pour la gestion de la base de données
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ruche_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ruche.fr
      PGADMIN_DEFAULT_PASSWORD: ruche_password
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin-servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - ruche_network

  # Service Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ruche_backend
    restart: always
    ports:
      - "8080:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_USER=ruche_user
      - DB_HOST=postgres
      - DB_NAME=ruche_db
      - DB_PASSWORD=ruche_password
      - DB_PORT=5432
      - JWT_SECRET=ruche_secret_jwt_a_changer_en_production
    networks:
      - ruche_network
    # Ajout d'un healthcheck pour le backend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
  # Service Frontend NuxtJS
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ruche_frontend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - HOST=0.0.0.0
      - PORT=3000
      - API_URL=http://backend:3000/api
      - BROWSER_BASE_URL=http://localhost:8080/api
    networks:
      - ruche_network

volumes:
  postgres_data:
    name: ruche_postgres_data
  pgadmin_data:
    name: ruche_pgadmin_data

networks:
  ruche_network:
    name: ruche_network
    driver: bridge 